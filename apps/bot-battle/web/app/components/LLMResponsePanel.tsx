import React, { useState } from "react";
import { ChevronDown, ChevronUp, HelpCircle } from "lucide-react";

const Tooltip = ({
  content,
  children,
}: {
  content: string;
  children: React.ReactNode;
}) => {
  return (
    <div className="relative flex items-center group">
      {children}
      <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none z-10">
        <div className="bg-gray-900 text-white text-xs rounded py-1 px-2 max-w-xl shadow-lg">
          {content}
          <div className="absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-gray-900"></div>
        </div>
      </div>
    </div>
  );
};

interface LLMResponsePanelProps {
  model: string;
  isLoading?: boolean;
  response?: string | React.ReactNode;
  metrics?: Record<string, string | number | undefined>;
}

function formatNumber(num: string | number | undefined, digits = 2) {
  if (typeof num === "number") return num.toFixed(digits);
  if (typeof num === "string" && !isNaN(Number(num)))
    return Number(num).toFixed(digits);
  return num;
}

const METRIC_TOOLTIPS: Record<string, string> = {
  latencyMs: "Time taken for the LLM API to respond (milliseconds)",
  inputTokens: "Number of tokens in the prompt sent to the LLM.",
  outputTokens: "Number of tokens generated by the LLM in the response.",
  totalTokens: "Total tokens used (input + output).",
  tokensPerSecond:
    "Output tokens divided by latency in seconds (higher is better).",
  wordCount: "Number of words in the LLM's response.",
  charCount: "Number of characters in the LLM's response.",
  accuracy: "How factually correct is the response? (1=poor, 5=excellent)",
  clarity:
    "How clear and understandable is the response? (1=poor, 5=excellent)",
  relevance:
    "How well does the response address the prompt? (1=poor, 5=excellent)",
  creativity: "How original or creative is the response? (1=low, 5=high)",
  toxicity:
    "How free is the response from offensive or harmful content? (1=toxic, 5=safe)",
  bias: "How unbiased and neutral is the response? (1=biased, 5=neutral)",
  comprehensiveness:
    "How complete and thorough is the response? (1=incomplete, 5=very comprehensive)",
};

const ADVANCED_METRICS = [
  { key: "accuracy", label: "Accuracy" },
  { key: "clarity", label: "Clarity" },
  { key: "relevance", label: "Relevance" },
  { key: "creativity", label: "Creativity" },
  { key: "toxicity", label: "Toxicity" },
  { key: "bias", label: "Bias" },
  { key: "comprehensiveness", label: "Comprehensiveness" },
];

export const LLMResponsePanel: React.FC<LLMResponsePanelProps> = ({
  model,
  isLoading,
  response,
  metrics = {},
}) => {
  const [isExpanded, setIsExpanded] = useState(true);

  function renderMetric(
    label: string,
    value: string | number | undefined,
    key: string
  ) {
    return (
      <li key={key} className="flex items-center gap-1">
        <span>
          {label}: <b>{value}</b>
        </span>
        {METRIC_TOOLTIPS[key] && (
          <Tooltip content={METRIC_TOOLTIPS[key]}>
            <HelpCircle size={14} className="text-gray-400 ml-1 cursor-help" />
          </Tooltip>
        )}
      </li>
    );
  }

  return (
    <div className="border border-gray-200 dark:border-gray-700 rounded-lg p-4 mb-4">
      <div className="flex justify-between items-center mb-3">
        <div className="font-bold">{model}</div>
        {!isLoading && response && (
          <button
            onClick={() => setIsExpanded(!isExpanded)}
            type="button"
            className="flex items-center text-sm text-blue-600 hover:underline"
            aria-expanded={isExpanded}
          >
            {isExpanded ? (
              <>
                <ChevronUp size={16} className="mr-1" />
                Hide Response
              </>
            ) : (
              <>
                <ChevronDown size={16} className="mr-1" />
                Show Response
              </>
            )}
          </button>
        )}
      </div>

      {isLoading ? (
        <div className="text-gray-500">Loading...</div>
      ) : (
        <>
          {/* Metrics panel - now above the response */}
          <div className="text-xs text-gray-700 dark:text-gray-300 mb-3 bg-gray-50 dark:bg-gray-800 p-3 rounded">
            {metrics && (
              <ul className="grid grid-cols-2 gap-x-4 gap-y-1">
                {metrics.latencyMs !== undefined &&
                  renderMetric(
                    "Latency",
                    metrics.latencyMs + " ms",
                    "latencyMs"
                  )}
                {metrics.inputTokens !== undefined &&
                  renderMetric(
                    "Input tokens",
                    metrics.inputTokens,
                    "inputTokens"
                  )}
                {metrics.outputTokens !== undefined &&
                  renderMetric(
                    "Output tokens",
                    metrics.outputTokens,
                    "outputTokens"
                  )}
                {metrics.totalTokens !== undefined &&
                  renderMetric(
                    "Total tokens",
                    metrics.totalTokens,
                    "totalTokens"
                  )}
                {metrics.tokensPerSecond !== undefined &&
                  renderMetric(
                    "Tokens/sec",
                    formatNumber(metrics.tokensPerSecond),
                    "tokensPerSecond"
                  )}
                {metrics.wordCount !== undefined &&
                  renderMetric("Word count", metrics.wordCount, "wordCount")}
                {metrics.charCount !== undefined &&
                  renderMetric("Char count", metrics.charCount, "charCount")}
                {/* Advanced Groq metrics (auto-judged) */}
                {ADVANCED_METRICS.map(({ key, label }) =>
                  metrics[key] !== undefined
                    ? renderMetric(label, metrics[key], key)
                    : null
                )}
              </ul>
            )}
          </div>

          {/* Collapsible response */}
          {isExpanded && (
            <div className="border-t border-gray-200 dark:border-gray-700 pt-3 mt-2">
              <pre className="whitespace-pre-wrap text-sm overflow-auto max-h-96">
                {response}
              </pre>
            </div>
          )}

          {/* Human rating controls */}
          {/* <div className="flex items-center gap-4 mt-4 border-t border-gray-200 dark:border-gray-700 pt-3">
            <div>
              <span className="mr-1">Human rating:</span>
              {[1, 2, 3, 4, 5].map((star) => (
                <button
                  key={star}
                  className={`text-xl ${
                    rating && rating >= star
                      ? "text-yellow-400"
                      : "text-gray-300"
                  }`}
                  onClick={() => setRating(star)}
                  aria-label={`Rate ${star} star${star > 1 ? "s" : ""}`}
                  type="button"
                >
                  â˜…
                </button>
              ))}
            </div>
            <div>
              <span className="mr-1">Accuracy:</span>
              <select
                value={accuracy ?? ""}
                onChange={(e) => setAccuracy(e.target.value as any)}
                className="border rounded px-2 py-1 text-xs"
              >
                <option value="">Select</option>
                <option value="accurate">Accurate</option>
                <option value="inaccurate">Inaccurate</option>
                <option value="unsure">Unsure</option>
              </select>
            </div>
          </div> */}
        </>
      )}
    </div>
  );
};
